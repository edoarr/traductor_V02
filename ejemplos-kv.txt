Ejemplos para editar la interfaz:

Ejemplo 1 (Desde KV)

En este ejemplo, se define una clase personalizada para el botón que hereda de la clase base correspondiente. 
Luego se define la apariencia personalizada del botón utilizando el lenguaje de marcado KV.


from kivy.app import App
from kivy.lang import Builder

kv = """
<MyButton>:
    background_color: 1, 0, 0, 1
    font_size: 20
    size_hint: None, None
    size: 200, 50

<MyScreen>:
    MyButton:
        text: "Custom Button"
        pos_hint: {"center_x": .5, "center_y": .5}
"""

class MyButton(Button):
    pass

class MyScreen(Screen):
    pass

class TestApp(App):
    def build(self):
        Builder.load_string(kv)
        return MyScreen()

if __name__ == "__main__":
    TestApp().run()
    
    
    
    
Ejemplo 2 (Desde python)

posible personalizar los botones y cuadros de texto en Kivy. Puedes cambiar el color de fondo y el tamaño de letra de los botones y cuadros de texto 
utilizando la propiedad background_color y font_size, respectivamente. Aquí hay un ejemplo de cómo hacerlo:

En este ejemplo, se define una clase personalizada para el botón y el cuadro de texto que hereda de la clase base correspondiente.
Luego se establecen las propiedades personalizadas para cada uno de ellos.

from kivy.app import App
from kivy.uix.button import Button
from kivy.uix.boxlayout import BoxLayout

class CustomButton(Button):
    pass

class CustomTextInput(TextInput):
    pass

class MainScreen(BoxLayout):
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.orientation = "vertical"

        # Custom button
        custom_button = CustomButton(text="Custom Button", background_color=(1, 0, 0, 1))
        self.add_widget(custom_button)

        # Custom text input
        custom_text_input = CustomTextInput(text="Custom Text Input", font_size=20)
        self.add_widget(custom_text_input)

class TestApp(App):
    def build(self):
        return MainScreen()

if __name__ == "__main__":
    TestApp().run()

